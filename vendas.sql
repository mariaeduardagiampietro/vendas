/*Atividade 1*/
UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'PENDENTE'
WHERE DATAVENCIMENTO < CURRENT_DATE AND SITUACAO_DEBITO NOT IN ('NEGOCIADO','PAGO'

/*Atividade 2*/
UPDATE DEBITOS 
SET SITUACAO_DEBITO = 'PENDENTE'
WHERE DATAVENCIMENTO < CURRENT_DATE AND SITUACAO_DEBITO <> 'PAGO'

/*Atividade 3*/
UPDATE DEBITOS 
SET DATAVENCIMENTO = DATEADD(YEAR, -5, DATAVENCIMENTO)
WHERE SITUACAO_DEBITO = 'NEGOCIADO'

/*Atividade 4*/
SELECT p.NOME, p.EMAIL, p.TELEFONE
FROM PESSOA p

/*Atividade 5*/
SELECT * FROM PRODUTOS p
WHERE PRECO_UNITARIO > 100

/*Atividade 6*/
SELECT * FROM VENDA v
WHERE DATA_VENDA = '2022-12-07'

/*Atividade 7*/
SELECT p.DATA_NASCIMENTO, p.NOME, 2024 - EXTRACT(YEAR FROM p.DATA_NASCIMENTO) AS IDADE FROM PESSOA p
WHERE p.ID_PESSOA IN (SELECT f.ID_PESSOA
FROM FORNECEDOR f
WHERE f.ID_FORNECEDOR NOT IN (
		SELECT p2.ID_FORNECEDOR
		FROM PRODUTO p2
)
)

/*Atividade 8*/
SELECT * FROM cliente c
WHERE c.ID_CLIENTE IN (SELECT d.ID_CLIENTE FROM debitos d WHERE d.DATAVENCIMENTO < CURRENT_DATE)
AND c.ID_Cliente IN (SELECT P.ID_CLIENTE FROM pagamento p)

/*Atividade 10*/- Não consegui resolver

/*Atividade 11*/
UPDATE PRODUTO
SET PRECO_UNITARIO = PRECO_UNITARIO * 1.10
WHERE QUANTIDADE_ESTOQUE < 10

/*Atividade 13*/
UPDATE DEBITOS
SET SITUACAO_DEBITO = 'Pagos'
WHERE SITUACAO_DEBITO = 'Atrasado'
AND EXISTS (
   SELECT 1
   FROM PAGAMENTO p
   WHERE p.id_debito = DEBITOS.id_debito
)

/*Atividade 15*/
SELECT * FROM VENDA
WHERE DATA_VENDA >= '2023-12-01' AND data_venda < '2024-02-01'

/*Atividade 16*/
SELECT * FROM PRODUTO 
WHERE QUANTIDADE_ESTOQUE BETWEEN 5 AND 20

/*Atividade 17*/
SELECT * FROM PESSOA
WHERE NOME LIKE 'A%'

/*Atividade 18*/
SELECT p.* FROM PRODUTO p
LEFT JOIN VENDA v ON id_produto = p.id_produto
WHERE id _produto IS NULL

/*Atividade 19*/
SELECT p.* FROM PRODUTO p
INNER JOIN VENDA v ON id_produto = p.id_produto
INNER JOIN CLIENTE c ON id_cliente = c.id_cliente
WHERE NOME IN ('Carla Souza', 'Larissa Ferreira')

/*Atividade 22*/
SELECT v.*, p.*
FROM VENDA v
INNER JOIN PRODUTO p ON ID_PRODUTO = ID_PRODUTO
WHERE p.nome = 'Placa de Captura'

/*Atividade 24*/
SELECT l.nome, b.ID_BAIRRO ,
CASE WHEN p.id_pessoa IS NOT NULL THEN 'Pertence' ELSE 'Não pertence'
END AS pertence
FROM LOGRADOURO l
JOIN BAIRRO b ON l.id_bairro = b.id_bairro
LEFT JOIN PESSOA p ON l.id_logradouro = id_logradouro

/*Atividade 25*/
SELECT * FROM PRODUTO P
WHERE P.PRECO_UNITARIO >
(SELECT AVG(PRODUTO.PRECO_UNITARIO) FROM PRODUTO)

/*Atividade 26*/
SELECT * FROM PESSOA P
WHERE P.ID_PESSOA IN (SELECT E.ID_PESSOA FROM ENDERECO E
WHERE E.ID_MUNICIPIO IN (SELECT M.ID_MUNICIPIO FROM MUNICIPIO M
WHERE M.POPULACAO > 1000000))

/* Exercício 28 */
SELECT P.NOME, V.VALOR_TOTAL
FROM VENDA V
RIGHT JOIN PESSOA P ON P.ID_PESSOA = V.ID_PESSOA
WHERE V.VALOR_TOTAL > 500

/* Exercício 29 */
SELECT P.NOME, E.NUMERO, E.COMPLEMENTO, L.NOME, B.NOME, B.CEP
FROM PESSOA P
RIGHT JOIN ENDERECO E ON E.ID_PESSOA = P.ID_PESSOA
RIGHT JOIN LOGRADOURO L ON L.ID_LOGRADOURO = E.ID_LOGRADOURO
RIGHT JOIN BAIRRO B ON B.ID_BAIRRO = L.ID_BAIRRO
WHERE E.NUMERO IS NOT NULL

/* Exercício 30 */
SELECT PES.NOME AS FORNECEDOR, P.NOME AS PRODUTO, P.DESCRICAO, P.PRECO_UNITARIO, P.QUANTIDADE_ESTOQUE
FROM PRODUTO P
INNER JOIN FORNECEDOR F ON F.ID_FORNECEDOR = P.ID_FORNECEDOR
RIGHT JOIN PESSOA PES ON PES.ID_PESSOA = F.ID_PESSOA
WHERE PES.ID_PESSOA IN (SELECT F.ID_PESSOA FROM FORNECEDOR F)


